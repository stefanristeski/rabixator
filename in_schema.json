[
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--variant"
          }, 
          "_order": 179, 
          "description": "Input VCF file", 
          "id": "variant", 
          "list": true, 
          "name": "Variant", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--mask"
          }, 
          "_order": 180, 
          "description": "Input ROD mask", 
          "id": "mask", 
          "list": false, 
          "name": "Mask", 
          "required": false, 
          "types": [
            "vcf", 
            "bed"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 181, 
          "description": "File to which variants should be written", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--clusterSize"
          }, 
          "_order": 184, 
          "category": "Variant Filtration", 
          "condition": null, 
          "default": 3, 
          "description": "The number of SNPs which make up a cluster", 
          "id": "cluster_size", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Cluster Size", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--clusterWindowSize"
          }, 
          "_order": 185, 
          "category": "Variant Filtration", 
          "condition": null, 
          "default": 0, 
          "description": "The window size (in bases) in which to evaluate clustered SNPs", 
          "id": "cluster_window_size", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Cluster Window Size", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 186, 
          "category": "Variant Filtration", 
          "condition": null, 
          "default": [], 
          "description": "One or more expression used with INFO fields to filter", 
          "id": "filters", 
          "item_label": "Filter", 
          "list": true, 
          "name": "Filters", 
          "required": false, 
          "schema": [
            {
              "_extra": {}, 
              "_order": 182, 
              "category": null, 
              "condition": null, 
              "default": null, 
              "description": "Filter name", 
              "id": "filter_name", 
              "list": false, 
              "name": "Filter name", 
              "pattern": null, 
              "required": true, 
              "type": "string"
            }, 
            {
              "_extra": {}, 
              "_order": 183, 
              "category": null, 
              "condition": null, 
              "default": null, 
              "description": "Filter expression", 
              "id": "filter_expression", 
              "list": false, 
              "name": "Filter expression", 
              "pattern": null, 
              "required": true, 
              "type": "string"
            }
          ], 
          "type": "struct"
        }, 
        {
          "_extra": {}, 
          "_order": 187, 
          "category": "Variant Filtration", 
          "condition": null, 
          "default": [], 
          "description": "One or more expression used with FORMAT (sample/genotype-level) fields to filter (see wiki docs for more info)", 
          "id": "genotype_filters", 
          "item_label": "Filter", 
          "list": true, 
          "name": "Genotype filters", 
          "required": false, 
          "schema": [
            {
              "_extra": {}, 
              "_order": 182, 
              "category": null, 
              "condition": null, 
              "default": null, 
              "description": "Filter name", 
              "id": "filter_name", 
              "list": false, 
              "name": "Filter name", 
              "pattern": null, 
              "required": true, 
              "type": "string"
            }, 
            {
              "_extra": {}, 
              "_order": 183, 
              "category": null, 
              "condition": null, 
              "default": null, 
              "description": "Filter expression", 
              "id": "filter_expression", 
              "list": false, 
              "name": "Filter expression", 
              "pattern": null, 
              "required": true, 
              "type": "string"
            }
          ], 
          "type": "struct"
        }, 
        {
          "_extra": {
            "arg": "--invalidatePreviousFilters"
          }, 
          "_order": 188, 
          "category": "Variant Filtration", 
          "condition": null, 
          "default": false, 
          "description": "Remove previous filters applied to the VCF", 
          "id": "invalidate_previous_filters", 
          "list": false, 
          "name": "Invalidate Previous Filters", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maskExtension"
          }, 
          "_order": 189, 
          "category": "Variant Filtration", 
          "condition": null, 
          "default": 0, 
          "description": "How many bases beyond records from a provided 'mask' rod should variants be filtered", 
          "id": "mask_extension", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Mask Extension", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maskName"
          }, 
          "_order": 190, 
          "category": "Variant Filtration", 
          "condition": null, 
          "default": "Mask", 
          "description": "The text to put in the FILTER field if a 'mask' rod is provided and overlaps with a variant call", 
          "id": "mask_name", 
          "list": false, 
          "name": "Mask Name", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--missingValuesInExpressionsShouldEvaluateAsFailing"
          }, 
          "_order": 191, 
          "category": "Variant Filtration", 
          "condition": null, 
          "default": false, 
          "description": "When evaluating the JEXL expressions, missing values should be considered failing the expression", 
          "id": "missing_values_in_expressions_should_evaluate_as_failing", 
          "list": false, 
          "name": "Missing Values In Expressions Should Evaluate As Failing", 
          "required": false, 
          "type": "boolean"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.variant_filtration.wrapper.VariantFiltrationLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--input_file"
          }, 
          "_order": 1, 
          "description": "Read sequences in BAM format.", 
          "id": "reads", 
          "list": true, 
          "name": "Read sequences", 
          "required": true, 
          "types": [
            "bam", 
            "sam"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 45, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file. Cannot be used if grouped by interval. ", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--knownSites", 
            "category": "Base Recalibrator", 
            "default": null
          }, 
          "_order": 46, 
          "description": "A database of known polymorphic sites to skip over in the recalibration algorithm", 
          "id": "known_sites", 
          "list": true, 
          "name": "Known Sites", 
          "required": false, 
          "types": [
            "vcf", 
            "bed", 
            "text"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out", 
            "category": "Base Recalibrator", 
            "default": null
          }, 
          "_order": 47, 
          "description": "The output recalibration table file to create", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": true, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--plot_pdf_file", 
            "category": "Base Recalibrator", 
            "default": null
          }, 
          "_order": 48, 
          "description": "The output recalibration pdf file to create", 
          "id": "plot_pdf_file", 
          "list": true, 
          "name": "Plot Pdf File", 
          "required": false, 
          "types": [
            "binary"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 35, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "chunk", 
              "Chunk", 
              "Chunk"
            ], 
            [
              "interval", 
              "Interval", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--binary_tag_name"
          }, 
          "_order": 49, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": null, 
          "description": "the binary tag covariate name if using it", 
          "id": "binary_tag_name", 
          "list": false, 
          "name": "Binary Tag Name", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--covariate"
          }, 
          "_order": 50, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": [], 
          "description": "One or more covariates to be used in the recalibration. Can be specified multiple times", 
          "id": "covariate", 
          "list": true, 
          "name": "Covariate", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "CycleCovariate", 
              "Cycle", 
              "The machine cycle for this base (different definition for the various technologies and therefore platform [@PL tag] is pulled out of the read's read group)."
            ], 
            [
              "ReadGroupCovariate", 
              "Read Group", 
              "The read group this read is a member of."
            ], 
            [
              "ContextCovariate", 
              "Context", 
              "Contextcovariate"
            ], 
            [
              "RepeatLengthCovariate", 
              "Repeat Length", 
              "Repeatlengthcovariate"
            ], 
            [
              "QualityScoreCovariate", 
              "Quality Score", 
              "The reported base quality score for this base."
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--deletions_default_quality"
          }, 
          "_order": 51, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": 45, 
          "description": "default quality for the base deletions covariate", 
          "id": "deletions_default_quality", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Deletions Default Quality", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--indels_context_size"
          }, 
          "_order": 52, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": 3, 
          "description": "size of the k-mer context to be used for base insertions and deletions", 
          "id": "indels_context_size", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Indels Context Size", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 53, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": true, 
          "description": "Disable indel quality recalibration. Must be set to true in GATK Lite.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable indel quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--insertions_default_quality"
          }, 
          "_order": 54, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": 45, 
          "description": "default quality for the base insertions covariate", 
          "id": "insertions_default_quality", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Insertions Default Quality", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--low_quality_tail"
          }, 
          "_order": 55, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": 2, 
          "description": "minimum quality for the bases in the tail of the reads to be considered", 
          "id": "low_quality_tail", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Low Quality Tail", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maximum_cycle_value"
          }, 
          "_order": 56, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": 500, 
          "description": "the maximum cycle value permitted for the Cycle covariate", 
          "id": "maximum_cycle_value", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Maximum Cycle Value", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--mismatches_context_size"
          }, 
          "_order": 57, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": 2, 
          "description": "size of the k-mer context to be used for base mismatches", 
          "id": "mismatches_context_size", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Mismatches Context Size", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--mismatches_default_quality"
          }, 
          "_order": 58, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": -1, 
          "description": "default quality for the base mismatches covariate", 
          "id": "mismatches_default_quality", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Mismatches Default Quality", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--no_standard_covs"
          }, 
          "_order": 59, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": false, 
          "description": "Do not use the standard set of covariates, but rather just the ones listed using the -cov argument. Cannot be used if grouped by interval.", 
          "id": "no_standard_covs", 
          "list": false, 
          "name": "No Standard Covs", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--quantizing_levels"
          }, 
          "_order": 60, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": 16, 
          "description": "number of distinct quality scores in the quantized output", 
          "id": "quantizing_levels", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Quantizing Levels", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--solid_nocall_strategy"
          }, 
          "_order": 61, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": "THROW_EXCEPTION", 
          "description": "Defines the behavior of the recalibrator when it encounters no calls in the color space. Options = THROW_EXCEPTION, LEAVE_READ_UNRECALIBRATED, or PURGE_READ", 
          "id": "solid_nocall_strategy", 
          "list": false, 
          "name": "Solid Nocall Strategy", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "THROW_EXCEPTION", 
              "THROW_EXCEPTION", 
              "When a no call is detected throw an exception to alert the user that recalibrating this SOLiD data is unsafe."
            ], 
            [
              "LEAVE_READ_UNRECALIBRATED", 
              "LEAVE_READ_UNRECALIBRATED", 
              "Leave the read in the output bam completely untouched. This mode is only okay if the no calls are very rare."
            ], 
            [
              "PURGE_READ", 
              "PURGE_READ", 
              "Mark these reads as failing vendor quality checks so they can be filtered out by downstream analyses."
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--solid_recal_mode"
          }, 
          "_order": 62, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": "SET_Q_ZERO", 
          "description": "How should we recalibrate solid bases in which the reference was inserted? Options = DO_NOTHING, SET_Q_ZERO, SET_Q_ZERO_BASE_N, or REMOVE_REF_BIAS", 
          "id": "solid_recal_mode", 
          "list": false, 
          "name": "Solid Recal Mode", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "DO_NOTHING", 
              "DO_NOTHING", 
              "Treat reference inserted bases as reference matching bases. Very unsafe!"
            ], 
            [
              "SET_Q_ZERO", 
              "SET_Q_ZERO", 
              "Set reference inserted bases and the previous base (because of color space alignment details) to Q0."
            ], 
            [
              "SET_Q_ZERO_BASE_N", 
              "SET_Q_ZERO_BASE_N", 
              "In addition to setting the quality scores to zero, also set the base itself to 'N'. This is useful to visualize in IGV."
            ], 
            [
              "REMOVE_REF_BIAS", 
              "REMOVE_REF_BIAS", 
              "Look at the color quality scores and probabilistically decide to change the reference inserted base to be the base which is implied by the original color space instead of the reference."
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--bqsrBAQGapOpenPenalty"
          }, 
          "_order": 63, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": 40.0, 
          "description": "BQSR BAQ gap open penalty (Phred Scaled).  Default value is 40.  30 is perhaps better for whole genome call sets", 
          "id": "bqsr_baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Bqsr Baq Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "-run_without_dbsnp_potentially_ruining_quality"
          }, 
          "_order": 64, 
          "category": "Base Recalibrator", 
          "condition": null, 
          "default": false, 
          "description": "If specified, allows the recalibrator to be used without a dbsnp rod. Very unsafe and for expert users only.", 
          "id": "run_without_dbsnp_potentially_ruining_quality", 
          "list": false, 
          "name": "Run Without Dbsnp Potentially Ruining Quality", 
          "required": false, 
          "type": "boolean"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.base_recalibrator.wrapper.BaseRecalibratorLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--variant", 
            "category": "Left Aligned Variants", 
            "default": null
          }, 
          "_order": 221, 
          "description": "Input VCF file", 
          "id": "variant", 
          "list": true, 
          "name": "Variant", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 222, 
          "description": "File to which variants should be written.", 
          "id": "out", 
          "list": true, 
          "name": "Left Aligned VCF", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.left_align_indels.wrapper.LeftAlignVariantsLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--variant", 
            "default": null
          }, 
          "_order": 144, 
          "description": "Input VCF file", 
          "id": "variant", 
          "list": true, 
          "name": "Variant", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--concordance"
          }, 
          "_order": 145, 
          "description": "Output variants that were also called in this comparison track", 
          "id": "concordance", 
          "list": false, 
          "name": "Concordance", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--discordance"
          }, 
          "_order": 146, 
          "description": "Output variants that were not called in this comparison track", 
          "id": "discordance", 
          "list": false, 
          "name": "Discordance", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--keepIDs"
          }, 
          "_order": 147, 
          "description": "Only emit sites whose ID is found in this file (one ID per line)", 
          "id": "keep_ids", 
          "list": false, 
          "name": "Keep IDs", 
          "required": false, 
          "types": [
            "text"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out", 
            "default": "stdout"
          }, 
          "_order": 148, 
          "description": "File to which variants should be written", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--ALLOW_NONOVERLAPPING_COMMAND_LINE_SAMPLES"
          }, 
          "_order": 149, 
          "category": "Select Variants", 
          "condition": null, 
          "default": false, 
          "description": "Allow a samples other than those in the VCF to be specified on the command line. These samples will be ignored.", 
          "id": "allow_nonoverlapping_command_line_samples", 
          "list": false, 
          "name": "Allow Nonoverlapping Command Line Samples", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--exclude_sample_name"
          }, 
          "_order": 150, 
          "category": "Select Variants", 
          "condition": null, 
          "default": [], 
          "description": "Exclude genotypes from this sample. Can be specified multiple times", 
          "id": "exclude_sample_name", 
          "list": true, 
          "name": "Exclude Sample Name", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--excludeFiltered"
          }, 
          "_order": 151, 
          "category": "Select Variants", 
          "condition": null, 
          "default": false, 
          "description": "Don't include filtered loci in the analysis", 
          "id": "exclude_filtered", 
          "list": false, 
          "name": "Exclude Filtered", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--excludeNonVariants"
          }, 
          "_order": 152, 
          "category": "Select Variants", 
          "condition": null, 
          "default": false, 
          "description": "Don't include loci found to be non-variant after the subsetting procedure", 
          "id": "exclude_non_variants", 
          "list": false, 
          "name": "Exclude Non Variants", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--keepOriginalAC"
          }, 
          "_order": 153, 
          "category": "Select Variants", 
          "condition": null, 
          "default": false, 
          "description": "Store the original AC, AF, and AN values in the INFO field after selecting (using keys AC_Orig, AF_Orig, and AN_Orig)", 
          "id": "keep_original_ac", 
          "list": false, 
          "name": "Keep Original Ac", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxIndelSize"
          }, 
          "_order": 154, 
          "category": "Select Variants", 
          "condition": null, 
          "default": 2147483647, 
          "description": "indel size select", 
          "id": "max_indel_size", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Indel Size", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--mendelianViolation"
          }, 
          "_order": 155, 
          "category": "Select Variants", 
          "condition": null, 
          "default": false, 
          "description": "output mendelian violation sites only", 
          "id": "mendelian_violation", 
          "list": false, 
          "name": "Mendelian Violation", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-mvq"
          }, 
          "_order": 156, 
          "category": "Select Variants", 
          "condition": null, 
          "default": 0.0, 
          "description": "Minimum genotype QUAL score for each trio member required to accept a site as a violation", 
          "id": "mvq", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Mvq", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--regenotype"
          }, 
          "_order": 157, 
          "category": "Select Variants", 
          "condition": null, 
          "default": false, 
          "description": "re-genotype the selected samples based on their GLs (or PLs)", 
          "id": "regenotype", 
          "list": false, 
          "name": "Regenotype", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--remove_fraction_genotypes"
          }, 
          "_order": 158, 
          "category": "Select Variants", 
          "condition": null, 
          "default": 0.0, 
          "description": "Selects a fraction (a number between 0 and 1) of the total genotypes at random from the variant track and sets them to nocall", 
          "id": "remove_fraction_genotypes", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Remove Fraction Genotypes", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--restrictAllelesTo"
          }, 
          "_order": 159, 
          "category": "Select Variants", 
          "condition": null, 
          "default": "ALL", 
          "description": "Select only variants of a particular allelicity. Valid options are ALL (default), MULTIALLELIC or BIALLELIC", 
          "id": "restrict_alleles_to", 
          "list": false, 
          "name": "Restrict Alleles To", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "MULTIALLELIC", 
              "MULTIALLELIC", 
              "MULTIALLELIC"
            ], 
            [
              "BIALLELIC", 
              "BIALLELIC", 
              "BIALLELIC"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--sample_expressions"
          }, 
          "_order": 160, 
          "category": "Select Variants", 
          "condition": null, 
          "default": [], 
          "description": "Regular expression to select many samples from the ROD tracks provided. Can be specified multiple times", 
          "id": "sample_expressions", 
          "list": true, 
          "name": "Sample Expressions", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--sample_name"
          }, 
          "_order": 161, 
          "category": "Select Variants", 
          "condition": null, 
          "default": [], 
          "description": "Include genotypes from this sample. Can be specified multiple times", 
          "id": "sample_name", 
          "list": true, 
          "name": "Sample Name", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--select_expressions"
          }, 
          "_order": 162, 
          "category": "Select Variants", 
          "condition": null, 
          "default": [], 
          "description": "One or more criteria to use when selecting the data", 
          "id": "select_expressions", 
          "list": true, 
          "name": "Select Expressions", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--select_random_fraction"
          }, 
          "_order": 163, 
          "category": "Select Variants", 
          "condition": null, 
          "default": 0.0, 
          "description": "Selects a fraction (a number between 0 and 1) of the total variants at random from the variant track", 
          "id": "select_random_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Select Random Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--selectTypeToInclude"
          }, 
          "_order": 164, 
          "category": "Select Variants", 
          "condition": null, 
          "default": [
            "INDEL", 
            "SNP", 
            "MIXED", 
            "MNP", 
            "SYMBOLIC", 
            "NO_VARIATION"
          ], 
          "description": "Select only a certain type of variants from the input file. Valid types are INDEL, SNP, MIXED, MNP, SYMBOLIC, NO_VARIATION. Can be specified multiple times", 
          "id": "select_type_to_include", 
          "list": true, 
          "name": "Select Type To Include", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "INDEL", 
              "INDEL", 
              "INDEL"
            ], 
            [
              "SNP", 
              "SNP", 
              "SNP"
            ], 
            [
              "MIXED", 
              "MIXED", 
              "MIXED"
            ], 
            [
              "MNP", 
              "MNP", 
              "MNP"
            ], 
            [
              "SYMBOLIC", 
              "SYMBOLIC", 
              "SYMBOLIC"
            ], 
            [
              "NO_VARIATION", 
              "NO_VARIATION", 
              "NO_VARIATION"
            ]
          ]
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.select_variants.wrapper.SelectVariantsLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--variant"
          }, 
          "_order": 65, 
          "description": "Input VCF file", 
          "id": "variant", 
          "list": true, 
          "name": "Variant", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 66, 
          "description": "File to which variants should be written", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 67, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "interval", 
              "Intervals", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--assumeIdenticalSamples"
          }, 
          "_order": 68, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": false, 
          "description": "If true, assume input VCFs have identical sample sets and disjoint calls", 
          "id": "assume_identical_samples", 
          "list": false, 
          "name": "Assume Identical Samples", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--filteredAreUncalled"
          }, 
          "_order": 69, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": false, 
          "description": "If true, then filtered VCFs are treated as uncalled, so that filtered set annotations don't appear in the combined VCF", 
          "id": "filtered_are_uncalled", 
          "list": false, 
          "name": "Filtered Are Uncalled", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--filteredrecordsmergetype"
          }, 
          "_order": 70, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": "KEEP_IF_ANY_UNFILTERED", 
          "description": "Determines how we should handle records seen at the same site in the VCF, but with different FILTER fields", 
          "id": "filteredrecordsmergetype", 
          "list": false, 
          "name": "Filteredrecordsmergetype", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "KEEP_IF_ANY_UNFILTERED", 
              "KEEP_IF_ANY_UNFILTERED", 
              "Union - leaves the record if any record is unfiltered."
            ], 
            [
              "KEEP_IF_ALL_UNFILTERED", 
              "KEEP_IF_ALL_UNFILTERED", 
              "Requires all records present at site to be unfiltered. VCF files that don't contain the record don't influence this."
            ], 
            [
              "KEEP_UNCONDITIONAL", 
              "KEEP_UNCONDITIONAL", 
              "If any record is present at this site (regardless of possibly being filtered), then all such records are kept and the filters are reset."
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--genotypemergeoption"
          }, 
          "_order": 71, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": null, 
          "description": "Determines how we should merge genotype records for samples shared across the ROD files", 
          "id": "genotypemergeoption", 
          "list": false, 
          "name": "Genotypemergeoption", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNIQUIFY", 
              "UNIQUIFY", 
              "Make all sample genotypes unique by file. Each sample shared across RODs gets named sample.ROD."
            ], 
            [
              "UNSORTED", 
              "UNSORTED", 
              "Take the genotypes in any order."
            ], 
            [
              "REQUIRE_UNIQUE", 
              "REQUIRE_UNIQUE", 
              "Require that all samples/genotypes be unique between all inputs."
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--mergeInfoWithMaxAC"
          }, 
          "_order": 72, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": false, 
          "description": "If true, when VCF records overlap the info field is taken from the one with the max AC instead of only taking the fields which are identical across the overlapping records.", 
          "id": "merge_info_with_max_ac", 
          "list": false, 
          "name": "Merge Info With Max Ac", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--minimalVCF"
          }, 
          "_order": 73, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": false, 
          "description": "If true, then the output VCF will contain no INFO or genotype FORMAT fields", 
          "id": "minimal_vcf", 
          "list": false, 
          "name": "Minimal Vcf", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--minimumN"
          }, 
          "_order": 74, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": 1, 
          "description": "Combine variants and output site only if the variant is present in at least N input files.", 
          "id": "minimum_n", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Minimum N", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--printComplexMerges"
          }, 
          "_order": 75, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": false, 
          "description": "Print out interesting sites requiring complex compatibility merging", 
          "id": "print_complex_merges", 
          "list": false, 
          "name": "Print Complex Merges", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--setKey"
          }, 
          "_order": 76, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": "set", 
          "description": "Key used in the INFO key=value tag emitted describing which set the combined VCF record came from", 
          "id": "set_key", 
          "list": false, 
          "name": "Set Key", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--suppressCommandLineHeader"
          }, 
          "_order": 77, 
          "category": "Combine Variants", 
          "condition": null, 
          "default": false, 
          "description": "If true, do not output the header containing the command line used", 
          "id": "suppress_command_line_header", 
          "list": false, 
          "name": "Suppress Command Line Header", 
          "required": false, 
          "type": "boolean"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.combine_variants.wrapper.CombineVariantsLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--variant", 
            "category": "Variant Annotator", 
            "default": null
          }, 
          "_order": 165, 
          "description": "Input VCF file", 
          "id": "variant", 
          "list": true, 
          "name": "Variant", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--comp", 
            "category": "Variant Annotator", 
            "default": null
          }, 
          "_order": 166, 
          "description": "Comparison VCF file", 
          "id": "comp", 
          "list": false, 
          "name": "Comp", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--dbsnp", 
            "category": "Variant Annotator", 
            "default": null
          }, 
          "_order": 167, 
          "description": "DbSNP file", 
          "id": "dbsnp", 
          "list": false, 
          "name": "Dbsnp", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--resource", 
            "category": "Variant Annotator", 
            "default": null
          }, 
          "_order": 168, 
          "description": "External resource VCF file", 
          "id": "resource", 
          "list": true, 
          "name": "Resource", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--snpEffFile", 
            "category": "Variant Annotator", 
            "default": null
          }, 
          "_order": 169, 
          "description": "A SnpEff output file from which to add annotations", 
          "id": "snp_eff_file", 
          "list": false, 
          "name": "Snp Eff File", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 170, 
          "description": "File to which variants should be written", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--alwaysAppendDbsnpId"
          }, 
          "_order": 171, 
          "category": "Variant Annotator", 
          "condition": null, 
          "default": false, 
          "description": "In conjunction with the dbSNP binding, append the dbSNP ID even when the variant VCF already has the ID field populated", 
          "id": "always_append_dbsnp_id", 
          "list": false, 
          "name": "Always Append Dbsnp Id", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--annotation"
          }, 
          "_order": 172, 
          "category": "Variant Annotator", 
          "condition": null, 
          "default": [], 
          "description": "One or more specific annotations to apply to variant calls", 
          "id": "annotation", 
          "list": true, 
          "name": "Annotation", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "AlleleBalance", 
              "AlleleBalance", 
              "The allele balance (fraction of ref bases over ref + alt bases) across all biallelic het-called samples"
            ], 
            [
              "AlleleBalanceBySample", 
              "AlleleBalanceBySample", 
              "Allele balance per sample"
            ], 
            [
              "BaseCounts", 
              "BaseCounts", 
              "Count of A, C, G, T bases across all samples"
            ], 
            [
              "BaseQualityRankSumTest", 
              "BaseQualityRankSumTest", 
              "U-based z-approximation from the Mann-Whitney Rank Sum Test for base qualities"
            ], 
            [
              "ChromosomeCounts", 
              "ChromosomeCounts", 
              "Allele counts and frequency for each ALT allele and total number of alleles in called genotypes"
            ], 
            [
              "ClippingRankSumTest", 
              "ClippingRankSumTest", 
              "U-based z-approximation from the Mann-Whitney Rank Sum Test for reads with clipped bases"
            ], 
            [
              "DepthOfCoverage", 
              "DepthOfCoverage", 
              "Total (unfiltered) depth over all samples"
            ], 
            [
              "DepthPerAlleleBySample", 
              "DepthPerAlleleBySample", 
              "The depth of coverage of each allele per sample"
            ], 
            [
              "FisherStrand", 
              "FisherStrand", 
              "Phred-scaled p-value using Fisher's Exact Test to detect strand bias"
            ], 
            [
              "GCContent", 
              "GCContent", 
              "GC content of the reference around the given site"
            ], 
            [
              "HaplotypeScore", 
              "HaplotypeScore", 
              "Consistency of the site with two (and only two) segregating haplotypes."
            ], 
            [
              "HardyWeinberg", 
              "HardyWeinberg", 
              "Hardy-Weinberg test for disequilibrium"
            ], 
            [
              "HomopolymerRun", 
              "HomopolymerRun", 
              "Largest contiguous homopolymer run of the variant allele"
            ], 
            [
              "InbreedingCoeff", 
              "InbreedingCoeff", 
              "Likelihood-based (using PL field) test for the inbreeding among samples."
            ], 
            [
              "LowMQ", 
              "LowMQ", 
              "Triplet annotation: fraction of MAQP == 0, MAPQ < 10, and count of all mapped reads"
            ], 
            [
              "MappingQualityRankSumTest", 
              "MappingQualityRankSumTest", 
              "U-based z-approximation from the Mann-Whitney Rank Sum Test for mapping qualities"
            ], 
            [
              "MappingQualityZero", 
              "MappingQualityZero", 
              "Total count across all samples of mapping quality zero reads"
            ], 
            [
              "MappingQualityZeroBySample", 
              "MappingQualityZeroBySample", 
              "Count for each sample of mapping quality zero reads"
            ], 
            [
              "NBaseCount", 
              "NBaseCount", 
              "The number of N bases, counting only SOLiD data"
            ], 
            [
              "QualByDepth", 
              "QualByDepth", 
              "Variant confidence (from the QUAL field) / unfiltered depth of non-reference samples."
            ], 
            [
              "RMSMappingQuality", 
              "RMSMappingQuality", 
              "Root Mean Square of the mapping quality of the reads across all samples."
            ], 
            [
              "ReadPosRankSumTest", 
              "ReadPosRankSumTest", 
              "U-based z-approximation from the Mann-Whitney Rank Sum Test for the distance from the end of the read for reads with the alternate allele"
            ], 
            [
              "SampleList", 
              "SampleList", 
              "List all of the polymorphic samples."
            ], 
            [
              "SnpEff", 
              "SnpEff", 
              "A set of genomic annotations based on the output of the SnpEff variant effect predictor tool (needs SnpEff input)"
            ], 
            [
              "SpanningDeletions", 
              "SpanningDeletions", 
              "Fraction of reads containing spanning deletions at this site"
            ], 
            [
              "TandemRepeatAnnotator", 
              "TandemRepeatAnnotator", 
              "Annotates variants that are composed of tandem repeats"
            ], 
            [
              "IndelType", 
              "IndelType", 
              "Rough category of indel type (insertion, deletion, multi-allelic, other)"
            ], 
            [
              "MappingQualityZeroFraction", 
              "MappingQualityZeroFraction", 
              "Fraction of all reads across samples that have mapping quality zero"
            ], 
            [
              "TechnologyComposition", 
              "TechnologyComposition", 
              "Counts of bases from Illumina, 454, and SOLiD at this site"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeAnnotation"
          }, 
          "_order": 173, 
          "category": "Variant Annotator", 
          "condition": null, 
          "default": [], 
          "description": "One or more specific annotations to exclude", 
          "id": "exclude_annotation", 
          "list": true, 
          "name": "Exclude Annotation", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--expression"
          }, 
          "_order": 174, 
          "category": "Variant Annotator", 
          "condition": null, 
          "default": [], 
          "description": "One or more specific expressions to apply to variant calls; see documentation for more details", 
          "id": "expression", 
          "list": true, 
          "name": "Expression", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--group"
          }, 
          "_order": 175, 
          "category": "Variant Annotator", 
          "condition": null, 
          "default": [], 
          "description": "One or more classes/groups of annotations to apply to variant calls", 
          "id": "group", 
          "list": true, 
          "name": "Group", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "-mvq"
          }, 
          "_order": 176, 
          "category": "Variant Annotator", 
          "condition": null, 
          "default": 0.0, 
          "description": "The genotype quality threshold in order to annotate mendelian violation ratio", 
          "id": "mvq", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Mendel Violation Genotype Quality Threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--requireStrictAlleleMatch"
          }, 
          "_order": 177, 
          "category": "Variant Annotator", 
          "condition": null, 
          "default": false, 
          "description": "If provided only comp tracks that exactly match both reference and alternate alleles will be counted as concordant", 
          "id": "require_strict_allele_match", 
          "list": false, 
          "name": "Require Strict Allele Match", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useAllAnnotations"
          }, 
          "_order": 178, 
          "category": "Variant Annotator", 
          "condition": null, 
          "default": false, 
          "description": "Use all possible annotations (not for the faint of heart)", 
          "id": "use_all_annotations", 
          "list": false, 
          "name": "Use All Annotations", 
          "required": false, 
          "type": "boolean"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.variant_annotator.wrapper.VariantAnnotatorLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--input_file"
          }, 
          "_order": 1, 
          "description": "Read sequences in BAM format.", 
          "id": "reads", 
          "list": true, 
          "name": "Read sequences", 
          "required": true, 
          "types": [
            "bam", 
            "sam"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--BQSR"
          }, 
          "_order": 78, 
          "description": "The input covariates table file which enables on-the-fly base quality score recalibration", 
          "id": "bqsr", 
          "list": true, 
          "name": "BQSR", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--dbsnp"
          }, 
          "_order": 79, 
          "description": "dbSNP file in VCF format.", 
          "id": "dbsnp", 
          "list": false, 
          "name": "dbSNP", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--alleles", 
            "default": "none"
          }, 
          "_order": 80, 
          "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES", 
          "id": "alleles", 
          "list": false, 
          "name": "Alleles", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--comp", 
            "default": null
          }, 
          "_order": 81, 
          "description": "Comparison VCF file", 
          "id": "comp", 
          "list": true, 
          "name": "Comp", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--reference_sample_calls", 
            "default": "none"
          }, 
          "_order": 82, 
          "description": "VCF file with the truth callset for the reference sample", 
          "id": "reference_sample_calls", 
          "list": false, 
          "name": "Reference Sample Calls", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 83, 
          "description": "A raw, unfiltered, highly specific callset in VCF format.", 
          "id": "vcf", 
          "list": true, 
          "name": "VCF", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 35, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "chunk", 
              "Chunk", 
              "Chunk"
            ], 
            [
              "interval", 
              "Interval", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--annotateNDA"
          }, 
          "_order": 84, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": false, 
          "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site", 
          "id": "annotate_nda", 
          "list": false, 
          "name": "Annotate Nda", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--annotation"
          }, 
          "_order": 85, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": [], 
          "description": "One or more specific annotations to apply to variant calls", 
          "id": "annotation", 
          "list": true, 
          "name": "Annotation", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--computeSLOD"
          }, 
          "_order": 86, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": false, 
          "description": "If provided, we will calculate the SLOD (SB annotation)", 
          "id": "compute_slod", 
          "list": false, 
          "name": "Compute Slod", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-contamination"
          }, 
          "_order": 87, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 0.05, 
          "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove.", 
          "id": "contamination", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Contamination", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--excludeAnnotation"
          }, 
          "_order": 88, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": [], 
          "description": "One or more specific annotations to exclude", 
          "id": "exclude_annotation", 
          "list": true, 
          "name": "Exclude Annotation", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--genotype_likelihoods_model"
          }, 
          "_order": 89, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": "SNP", 
          "description": "Genotype likelihoods calculation model to employ -- SNP is the default option, while INDEL is also available for calling indels and BOTH is available for calling both together", 
          "id": "genotype_likelihoods_model", 
          "list": false, 
          "name": "Genotype Likelihoods Model", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SNP", 
              "SNP", 
              "SNP"
            ], 
            [
              "INDEL", 
              "InDel", 
              "INDEL"
            ], 
            [
              "GENERALPLOIDYSNP", 
              "General Ploidy SNP", 
              "GENERALPLOIDYSNP"
            ], 
            [
              "GENERALPLOIDYINDEL", 
              "General Ploidy InDel", 
              "GENERALPLOIDYINDEL"
            ], 
            [
              "BOTH", 
              "Both", 
              "BOTH"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--genotyping_mode"
          }, 
          "_order": 90, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": "DISCOVERY", 
          "description": "Specifies how to determine the alternate alleles to use for genotyping", 
          "id": "genotyping_mode", 
          "list": false, 
          "name": "Genotyping Mode", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "DISCOVERY", 
              "DISCOVERY", 
              "the Unified Genotyper will choose the most likely alternate allele"
            ], 
            [
              "GENOTYPE_GIVEN_ALLELES", 
              "GENOTYPE_GIVEN_ALLELES", 
              "only the alleles passed in from a VCF rod bound to the -alleles argument will be used for genotyping"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--group"
          }, 
          "_order": 91, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": [
            "Standard"
          ], 
          "description": "One or more classes/groups of annotations to apply to variant calls", 
          "id": "group", 
          "list": true, 
          "name": "Group", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--heterozygosity"
          }, 
          "_order": 92, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 0.001, 
          "description": "Heterozygosity value used to compute prior likelihoods for any locus", 
          "id": "heterozygosity", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Heterozygosity", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--ignoreLaneInfo"
          }, 
          "_order": 93, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": false, 
          "description": "Ignore lane when building error model, error model is then per-site", 
          "id": "ignore_lane_info", 
          "list": false, 
          "name": "Ignore Lane Info", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--indel_heterozygosity"
          }, 
          "_order": 94, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 0.000125, 
          "description": "Heterozygosity for indel calling", 
          "id": "indel_heterozygosity", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Indel Heterozygosity", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--max_deletion_fraction"
          }, 
          "_order": 95, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 0.05, 
          "description": "Maximum fraction of reads with deletions spanning this locus for it to be callable [to disable, set to  1; default:0.05]", 
          "id": "max_deletion_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Deletion Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--min_base_quality_score"
          }, 
          "_order": 96, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 17, 
          "description": "Minimum base quality required to consider a base for calling", 
          "id": "min_base_quality_score", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Min Base Quality Score", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "-minIndelCnt"
          }, 
          "_order": 97, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 5, 
          "description": "Minimum number of consensus indels required to trigger genotyping run", 
          "id": "min_indel_cnt", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Min Indel Cnt", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "-minIndelFrac"
          }, 
          "_order": 98, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 0.25, 
          "description": "Minimum fraction of all reads at a locus that must contain an indel (of any allele) for that sample to contribute to the indel count for alleles", 
          "id": "min_indel_frac", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Min Indel Frac", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--output_mode"
          }, 
          "_order": 99, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": "EMIT_VARIANTS_ONLY", 
          "description": "Specifies which type of calls we should output", 
          "id": "output_mode", 
          "list": false, 
          "name": "Output Mode", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "EMIT_VARIANTS_ONLY", 
              "EMIT_VARIANTS_ONLY", 
              "produces calls only at variant sites"
            ], 
            [
              "EMIT_ALL_CONFIDENT_SITES", 
              "EMIT_ALL_CONFIDENT_SITES", 
              "produces calls at variant sites and confident reference sites"
            ], 
            [
              "EMIT_ALL_SITES", 
              "EMIT_ALL_SITES", 
              "produces calls at any callable site regardless of confidence; this argument is intended only for point mutations (SNPs) in DISCOVERY mode or generally when running in GENOTYPE_GIVEN_ALLELES mode; it will by no means produce a comprehensive set of indels in DISCOVERY mode"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--pair_hmm_implementation"
          }, 
          "_order": 100, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": "ORIGINAL", 
          "description": "The PairHMM implementation to use for -glm INDEL genotype likelihood calculations", 
          "id": "pair_hmm_implementation", 
          "list": false, 
          "name": "Pair Hmm Implementation", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "EXACT", 
              "EXACT", 
              "EXACT"
            ], 
            [
              "ORIGINAL", 
              "ORIGINAL", 
              "ORIGINAL"
            ], 
            [
              "CACHING", 
              "CACHING", 
              "CACHING"
            ], 
            [
              "LOGLESS_CACHING", 
              "LOGLESS_CACHING", 
              "LOGLESS_CACHING"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--pcr_error_rate"
          }, 
          "_order": 101, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 0.0001, 
          "description": "The PCR error rate to be used for computing fragment-based likelihoods", 
          "id": "pcr_error_rate", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Pcr Error Rate", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "-stand_call_conf"
          }, 
          "_order": 103, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 30.0, 
          "description": "The minimum phred-scaled confidence threshold at which variants should be called", 
          "id": "stand_call_conf", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Stand Call Conf", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "-stand_emit_conf"
          }, 
          "_order": 104, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 30.0, 
          "description": "The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold)", 
          "id": "stand_emit_conf", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Stand Emit Conf", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--indelGapContinuationPenalty"
          }, 
          "_order": 105, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 10, 
          "description": "Indel gap continuation penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10", 
          "id": "indel_gap_continuation_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Indel Gap Continuation Penalty", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--indelGapOpenPenalty"
          }, 
          "_order": 106, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 45, 
          "description": "Indel gap open penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10", 
          "id": "indel_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Indel Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--max_alternate_alleles"
          }, 
          "_order": 107, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": 6, 
          "description": "Maximum number of alternate alleles to genotype", 
          "id": "max_alternate_alleles", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Alternate Alleles", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--p_nonref_model"
          }, 
          "_order": 108, 
          "category": "Unified Genotyper", 
          "condition": null, 
          "default": "EXACT_INDEPENDENT", 
          "description": "Non-reference probability calculation model to employ", 
          "id": "p_nonref_model", 
          "list": false, 
          "name": "P Nonref Model", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "EXACT_INDEPENDENT", 
              "EXACT_INDEPENDENT", 
              "Expt. implementation -- for testing only"
            ], 
            [
              "EXACT_REFERENCE", 
              "EXACT_REFERENCE", 
              "Reference implementation of multi-allelic EXACT model. Extremely slow for many alternate alleles"
            ], 
            [
              "EXACT_ORIGINAL", 
              "EXACT_ORIGINAL", 
              "Original biallelic exact model, for testing only"
            ], 
            [
              "EXACT_GENERAL_PLOIDY", 
              "EXACT_GENERAL_PLOIDY", 
              "Implementation that supports any sample ploidy"
            ]
          ]
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.genotyper.wrapper.UnifiedGenotyperLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--input"
          }, 
          "_order": 192, 
          "description": "The raw input variants to be recalibrated", 
          "id": "input", 
          "list": true, 
          "name": "Input", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 193, 
          "description": "Resources", 
          "id": "resources", 
          "list": true, 
          "name": "Resources", 
          "required": true, 
          "types": []
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--recal_file"
          }, 
          "_order": 194, 
          "description": "The output recal file used by ApplyRecalibration", 
          "id": "recal_file", 
          "list": true, 
          "name": "Recal File", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--tranches_file"
          }, 
          "_order": 195, 
          "description": "The output tranches file used by ApplyRecalibration", 
          "id": "tranches_file", 
          "list": true, 
          "name": "Tranches File", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--rscript_file", 
            "category": "Variant Recalibrator", 
            "default": null
          }, 
          "_order": 196, 
          "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model", 
          "id": "rscript_file", 
          "list": true, 
          "name": "Rscript File", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 197, 
          "description": "PDF file containing plots generated by VariantRecalibrator", 
          "id": "R_plots", 
          "list": true, 
          "name": "R Plots", 
          "required": false, 
          "types": [
            "binary"
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 198, 
          "description": "PDF file containing tranches plot generated by VariantRecalibrator", 
          "id": "tranches_plot", 
          "list": true, 
          "name": "Tranches Plot", 
          "required": false, 
          "types": [
            "binary"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 35, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "chunk", 
              "Chunk", 
              "Chunk"
            ], 
            [
              "interval", 
              "Interval", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--use_annotation"
          }, 
          "_order": 199, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": [], 
          "description": "The names of the annotations which should used for calculations (from input VCF INFO fields).", 
          "id": "use_annotation", 
          "list": true, 
          "name": "Use Annotation", 
          "pattern": null, 
          "required": true, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--dirichlet"
          }, 
          "_order": 200, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 0.001, 
          "description": "The dirichlet parameter in the variational Bayes algorithm.", 
          "id": "dirichlet", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Dirichlet", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--ignore_filter"
          }, 
          "_order": 201, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": [], 
          "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file", 
          "id": "ignore_filter", 
          "list": true, 
          "name": "Ignore Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--maxGaussians"
          }, 
          "_order": 202, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 10, 
          "description": "The maximum number of Gaussians to try during variational Bayes algorithm", 
          "id": "max_gaussians", 
          "list": false, 
          "max": null, 
          "min": 0, 
          "name": "Max Gaussians", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxIterations"
          }, 
          "_order": 203, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 100, 
          "description": "The maximum number of VBEM iterations to be performed in variational Bayes algorithm. Procedure will normally end when convergence is detected.", 
          "id": "max_iterations", 
          "list": false, 
          "max": null, 
          "min": 0, 
          "name": "Max Iterations", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--minNumBadVariants"
          }, 
          "_order": 204, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 2500, 
          "description": "The minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad argument if necessary.", 
          "id": "min_num_bad_variants", 
          "list": false, 
          "max": null, 
          "min": 0, 
          "name": "Min Num Bad Variants", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--mode"
          }, 
          "_order": 205, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": "SNP", 
          "description": "Recalibration mode to employ: 1.) SNP for recalibrating only snps (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both snps and indels simultaneously.", 
          "id": "mode", 
          "list": false, 
          "name": "Mode", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SNP", 
              "SNP", 
              "SNP"
            ], 
            [
              "INDEL", 
              "INDEL", 
              "INDEL"
            ], 
            [
              "BOTH", 
              "BOTH", 
              "BOTH"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--numKMeans"
          }, 
          "_order": 206, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 30, 
          "description": "The number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model.", 
          "id": "num_k_means", 
          "list": false, 
          "max": null, 
          "min": 0, 
          "name": "Num K Means", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--percentBadVariants"
          }, 
          "_order": 207, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 0.03, 
          "description": "What percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent.", 
          "id": "percent_bad_variants", 
          "list": false, 
          "max": 1, 
          "min": 0, 
          "name": "Percent Bad Variants", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--priorCounts"
          }, 
          "_order": 208, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 20.0, 
          "description": "The number of prior counts to use in the variational Bayes algorithm.", 
          "id": "prior_counts", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Prior Counts", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--qualThreshold"
          }, 
          "_order": 209, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 80.0, 
          "description": "If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model.", 
          "id": "qual_threshold", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Qual Threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--shrinkage"
          }, 
          "_order": 210, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 1.0, 
          "description": "The shrinkage parameter in the variational Bayes algorithm.", 
          "id": "shrinkage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Shrinkage", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--stdThreshold"
          }, 
          "_order": 211, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 14.0, 
          "description": "If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model.", 
          "id": "std_threshold", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Std Threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--target_titv"
          }, 
          "_order": 212, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 2.15, 
          "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!", 
          "id": "target_titv", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Target Titv", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--ts_filter_level"
          }, 
          "_order": 213, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": 99.0, 
          "description": "The truth sensitivity level at which to start filtering, used here to indicate filtered variants in the model reporting plots", 
          "id": "ts_filter_level", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Ts Filter Level", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--TStranche"
          }, 
          "_order": 214, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": [
            100.0, 
            99.9, 
            99.0, 
            90.0
          ], 
          "description": "The levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent)", 
          "id": "t_stranche", 
          "list": true, 
          "max": null, 
          "min": null, 
          "name": "T Stranche", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--trustAllPolymorphic"
          }, 
          "_order": 215, 
          "category": "Variant Recalibrator", 
          "condition": null, 
          "default": false, 
          "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites to drastically speed up the computation.", 
          "id": "trust_all_polymorphic", 
          "list": false, 
          "name": "Trust All Polymorphic", 
          "required": false, 
          "type": "boolean"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.variant_recalibrator.wrapper.VariantRecalibratorLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {}, 
          "_order": 123, 
          "description": "Vcf", 
          "id": "vcf", 
          "list": false, 
          "name": "Vcf", 
          "required": false, 
          "types": []
        }
      ], 
      "outputs": [
        {
          "_extra": {}, 
          "_order": 124, 
          "description": "Vcf", 
          "id": "vcf", 
          "list": false, 
          "name": "Vcf", 
          "required": false, 
          "types": []
        }
      ], 
      "params": [
        {
          "_extra": {}, 
          "_order": 125, 
          "category": null, 
          "condition": null, 
          "default": null, 
          "description": "Label", 
          "id": "label", 
          "list": false, 
          "name": "Label", 
          "pattern": null, 
          "required": true, 
          "type": "string"
        }, 
        {
          "_extra": {}, 
          "_order": 126, 
          "category": null, 
          "condition": null, 
          "default": false, 
          "description": "Known", 
          "id": "known", 
          "list": false, 
          "name": "Known", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {}, 
          "_order": 127, 
          "category": null, 
          "condition": null, 
          "default": false, 
          "description": "Training", 
          "id": "training", 
          "list": false, 
          "name": "Training", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {}, 
          "_order": 128, 
          "category": null, 
          "condition": null, 
          "default": false, 
          "description": "Truth", 
          "id": "truth", 
          "list": false, 
          "name": "Truth", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {}, 
          "_order": 129, 
          "category": null, 
          "condition": null, 
          "default": null, 
          "description": "Prior", 
          "id": "prior", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Prior", 
          "required": true, 
          "step": null, 
          "type": "float"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.prep_vqsr_db.wrapper.VqsrDBComm"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--input", 
            "default": null
          }, 
          "_order": 38, 
          "description": "The raw input variants to be recalibrated", 
          "id": "variants", 
          "list": true, 
          "name": "Input", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--recal_file", 
            "default": null
          }, 
          "_order": 39, 
          "description": "The input recal file used by ApplyRecalibration", 
          "id": "recal_file", 
          "list": true, 
          "name": "Recal File", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--tranches_file", 
            "default": null
          }, 
          "_order": 40, 
          "description": "The input tranches file describing where to cut the data", 
          "id": "tranches_file", 
          "list": true, 
          "name": "Tranches File", 
          "required": true, 
          "types": [
            "text"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 41, 
          "description": "File to which variants should be written", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 35, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "chunk", 
              "Chunk", 
              "Chunk"
            ], 
            [
              "interval", 
              "Interval", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--ignore_filter"
          }, 
          "_order": 42, 
          "category": "Apply Recalibration", 
          "condition": null, 
          "default": [], 
          "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file", 
          "id": "ignore_filter", 
          "list": true, 
          "name": "Ignore Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--mode"
          }, 
          "_order": 43, 
          "category": "Apply Recalibration", 
          "condition": null, 
          "default": "SNP", 
          "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously.", 
          "id": "mode", 
          "list": false, 
          "name": "Mode", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SNP", 
              "SNP", 
              "SNP"
            ], 
            [
              "INDEL", 
              "INDEL", 
              "INDEL"
            ], 
            [
              "BOTH", 
              "BOTH", 
              "BOTH"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--ts_filter_level"
          }, 
          "_order": 44, 
          "category": "Apply Recalibration", 
          "condition": null, 
          "default": 99.0, 
          "description": "The truth sensitivity level at which to start filtering", 
          "id": "ts_filter_level", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Ts Filter Level", 
          "required": false, 
          "step": null, 
          "type": "float"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.apply_variant_recalibration.wrapper.ApplyRecalibrationLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--input_file"
          }, 
          "_order": 1, 
          "description": "Read sequences in BAM format.", 
          "id": "reads", 
          "list": true, 
          "name": "Read sequences", 
          "required": true, 
          "types": [
            "bam", 
            "sam"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--BQSR"
          }, 
          "_order": 130, 
          "description": "The input covariates table file which enables on-the-fly base quality score recalibration", 
          "id": "bqsr", 
          "list": true, 
          "name": "BQSR", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--sample_file", 
            "category": "Print Reads", 
            "default": null
          }, 
          "_order": 131, 
          "description": "File containing a list of samples (one per line). Can be specified multiple times", 
          "id": "sample_file", 
          "list": true, 
          "name": "Sample File", 
          "required": false, 
          "types": []
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 132, 
          "description": "Write output to this BAM filename", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": true, 
          "types": [
            "bam"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 35, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "chunk", 
              "Chunk", 
              "Chunk"
            ], 
            [
              "interval", 
              "Interval", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--number"
          }, 
          "_order": 133, 
          "category": "Print Reads", 
          "condition": null, 
          "default": -1, 
          "description": "Print the first n reads from the file, discarding the rest", 
          "id": "number", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Number", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--platform"
          }, 
          "_order": 134, 
          "category": "Print Reads", 
          "condition": null, 
          "default": null, 
          "description": "Exclude all reads with this platform from the output", 
          "id": "platform", 
          "list": false, 
          "name": "Platform", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--readGroup"
          }, 
          "_order": 135, 
          "category": "Print Reads", 
          "condition": null, 
          "default": null, 
          "description": "Exclude all reads with this read group from the output", 
          "id": "read_group", 
          "list": false, 
          "name": "Read Group", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--sample_name"
          }, 
          "_order": 136, 
          "category": "Print Reads", 
          "condition": null, 
          "default": [], 
          "description": "Sample name to be included in the analysis. Can be specified multiple times.", 
          "id": "sample_name", 
          "list": true, 
          "name": "Sample Name", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--simplify"
          }, 
          "_order": 137, 
          "category": "Print Reads", 
          "condition": null, 
          "default": false, 
          "description": "Simplify all reads.", 
          "id": "simplify", 
          "list": false, 
          "name": "Simplify", 
          "required": false, 
          "type": "boolean"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.print_reads.wrapper.PrintReadsLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--input_file"
          }, 
          "_order": 1, 
          "description": "Read sequences in BAM format.", 
          "id": "reads", 
          "list": true, 
          "name": "Read sequences", 
          "required": true, 
          "types": [
            "bam", 
            "sam"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out", 
            "default": null
          }, 
          "_order": 223, 
          "description": "A modified VCF detailing each interval by sample and information for each interval according to the thresholds used. Interval information includes GC Content, average interval depth, callable status among others.", 
          "id": "out", 
          "list": true, 
          "name": "VCF", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 35, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "chunk", 
              "Chunk", 
              "Chunk"
            ], 
            [
              "interval", 
              "Interval", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--bad_mate_status_threshold"
          }, 
          "_order": 224, 
          "category": "Default", 
          "condition": null, 
          "default": 0.5, 
          "description": "The proportion of the loci needed for calling BAD_MATE.", 
          "id": "bad_mate_status_threshold", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Bad mate status threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--coverage_status_threshold"
          }, 
          "_order": 225, 
          "category": "Default", 
          "condition": null, 
          "default": 0.2, 
          "description": "The proportion of the loci needed for calling LOW_COVERAGE and COVERAGE_GAPS. The proportion of loci in a sample that must fall under the LOW_COVERAGE or COVERAGE_GAPS category for the sample to be reported as either (or both)", 
          "id": "coverage_status_threshold", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Coverage status threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--excessive_coverage_status_threshold"
          }, 
          "_order": 226, 
          "category": "Default", 
          "condition": null, 
          "default": 0.2, 
          "description": "The proportion of the loci needed for calling EXCESSIVE_COVERAGE. The proportion of loci in a sample that must fall under the EXCESSIVE_COVERAGE category for the sample to be reported as EXCESSIVE_COVERAGE", 
          "id": "excessive_coverage_status_threshold", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Excessive coverage status threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--maximum_coverage"
          }, 
          "_order": 227, 
          "category": "Default", 
          "condition": null, 
          "default": 1073741823, 
          "description": "The maximum allowable coverage, used for calling EXCESSIVE_COVERAGE. If at any locus, a sample has more coverage than this, it will be reported as EXCESSIVE_COVERAGE", 
          "id": "maximum_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Maximum coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maximum_insert_size"
          }, 
          "_order": 228, 
          "category": "Default", 
          "condition": null, 
          "default": 500, 
          "description": "The maximum allowed distance between a read and its mate. If any sample has a paired read whose distance between alignment starts (between the pairs) is greater than this, it will be reported as BAD_MATE", 
          "id": "maximum_insert_size", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Maximum insert size", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--minimum_base_quality"
          }, 
          "_order": 229, 
          "category": "Default", 
          "condition": null, 
          "default": 20, 
          "description": "The minimum Base Quality that is considered for calls. Only bases with quality greater than this will be considered in the coverage metrics.", 
          "id": "minimum_base_quality", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Minimum base quality", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--minimum_coverage"
          }, 
          "_order": 230, 
          "category": "Default", 
          "condition": null, 
          "default": 5, 
          "description": "The minimum allowable coverage, used for calling LOW_COVERAGE. If at any locus, a sample has less coverage than this, it will be reported as LOW_COVERAGE.", 
          "id": "minimum_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Minimum coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--minimum_mapping_quality"
          }, 
          "_order": 231, 
          "category": "Default", 
          "condition": null, 
          "default": 5, 
          "description": "The minimum read mapping quality considered for calls. Only reads with mapping quality greater than this will be considered in the coverage metrics..", 
          "id": "minimum_mapping_quality", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Minimum mapping quality", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--quality_status_threshold"
          }, 
          "_order": 232, 
          "category": "Default", 
          "condition": null, 
          "default": 0.5, 
          "description": "The proportion of the loci needed for calling POOR_QUALITY The proportion of loci in a sample that must fall under the LOW_QUALITY category for the sample to be reported as LOW_QUALITY.", 
          "id": "quality_status_threshold", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Quality status threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--voting_status_threshold"
          }, 
          "_order": 233, 
          "category": "Default", 
          "condition": null, 
          "default": 0.5, 
          "description": "The needed proportion of samples containing a call for the interval to adopt the call. The proportion of samples that must have a status for it to filter the entire interval. Example: 8 out of 10 samples have low coverage status on the interval, with a threshold higher than 0.2, this interval will be filtered as LOW_COVERAGE..", 
          "id": "voting_status_threshold", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Voting status threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.diagnose_targets.wrapper.DiagnoseTargetsLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--variant"
          }, 
          "_order": 216, 
          "description": "Input VCF file", 
          "id": "variant", 
          "list": true, 
          "name": "Variant", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 217, 
          "description": "File to which variants should be written", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": true, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxHardy"
          }, 
          "_order": 218, 
          "category": "Variant Assessment", 
          "condition": null, 
          "default": 20.0, 
          "description": "Maximum phred-scaled Hardy-Weinberg violation pvalue to consider an assay valid", 
          "id": "max_hardy", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Maximum HW violation", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--maxHomVar"
          }, 
          "_order": 219, 
          "category": "Variant Assessment", 
          "condition": null, 
          "default": 1.1, 
          "description": "Maximum homozygous variant rate (as a fraction) to consider an assay valid", 
          "id": "max_homvar", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Maximum homozygous variant rate", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--maxNoCall"
          }, 
          "_order": 220, 
          "category": "Variant Assessment", 
          "condition": null, 
          "default": 0.05, 
          "description": "Maximum no-call rate (as a fraction) to consider an assay valid", 
          "id": "max_nocall", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Maximum no-call rate", 
          "required": false, 
          "step": null, 
          "type": "float"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.variant_validation_assessor.wrapper.VariantValidationAssessorLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--input_file"
          }, 
          "_order": 1, 
          "description": "Read sequences in BAM format.", 
          "id": "reads", 
          "list": true, 
          "name": "Read sequences", 
          "required": true, 
          "types": [
            "bam", 
            "sam"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--known"
          }, 
          "_order": 138, 
          "description": "VCF file with known indels.", 
          "id": "known", 
          "list": true, 
          "name": "Known indels", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out"
          }, 
          "_order": 139, 
          "description": "An output file created by the walker.", 
          "id": "intervals", 
          "list": true, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 35, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "chunk", 
              "Chunk", 
              "Chunk"
            ], 
            [
              "interval", 
              "Interval", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxIntervalSize"
          }, 
          "_order": 140, 
          "category": "Realigner Target Creator", 
          "condition": null, 
          "default": 500, 
          "description": "Maximum interval size. Because the realignment algorithm is N^2, allowing too large an interval might take too long to completely realign.", 
          "id": "max_interval_size", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Maximum interval size", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--minReadsAtLocus"
          }, 
          "_order": 141, 
          "category": "Realigner Target Creator", 
          "condition": null, 
          "default": 4, 
          "description": "Minimum reads at a locus to enable using the entropy calculation.", 
          "id": "min_reads_at_locus", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Minimum reads at locus", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--mismatchFraction"
          }, 
          "_order": 142, 
          "category": "Realigner Target Creator", 
          "condition": null, 
          "default": 0.0, 
          "description": "Fraction of base qualities needing to mismatch for a position to have high entropy. To disable this behavior, set this value to <= 0 or > 1. This feature is really only necessary when using an ungapped aligner (e.g. MAQ in the case of single-end read data) and should be used in conjunction with USE_SW' option.", 
          "id": "mismatch_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Mismatch fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--windowSize"
          }, 
          "_order": 143, 
          "category": "Realigner Target Creator", 
          "condition": null, 
          "default": 10, 
          "description": "Window size for calculating entropy or SNP clusters. Any two SNP calls and/or high entropy positions are considered clustered when they occur no more than this many base pairs apart.", 
          "id": "window_size", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Window size", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.realigner_target_creator.wrapper.RealignerTargetCreatorLite"
  }, 
  {
    "schema": {
      "inputs": [
        {
          "_extra": {
            "arg": "--reference_sequence"
          }, 
          "_order": 0, 
          "description": "Reference Genome in FASTA format", 
          "id": "reference", 
          "list": false, 
          "name": "Reference Genome", 
          "required": true, 
          "types": [
            "fasta"
          ]
        }, 
        {
          "_extra": {
            "arg": "--input_file"
          }, 
          "_order": 1, 
          "description": "Read sequences in BAM format.", 
          "id": "reads", 
          "list": true, 
          "name": "Read sequences", 
          "required": true, 
          "types": [
            "bam", 
            "sam"
          ]
        }, 
        {
          "_extra": {
            "arg": "--excludeIntervals"
          }, 
          "_order": 2, 
          "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file", 
          "id": "exclude_intervals", 
          "list": false, 
          "name": "Exclude Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--intervals"
          }, 
          "_order": 3, 
          "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file", 
          "id": "intervals", 
          "list": false, 
          "name": "Intervals", 
          "required": false, 
          "types": [
            "text", 
            "bed", 
            "vcf"
          ]
        }, 
        {
          "_extra": {
            "arg": "--gatk_key"
          }, 
          "_order": 4, 
          "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "gatk_key", 
          "list": false, 
          "name": "Gatk key", 
          "required": false, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--targetIntervals", 
            "category": "Indel Realigner", 
            "default": null
          }, 
          "_order": 109, 
          "description": "intervals file output from RealignerTargetCreator", 
          "id": "target_intervals", 
          "list": true, 
          "name": "Target Intervals", 
          "required": true, 
          "types": [
            "text"
          ]
        }, 
        {
          "_extra": {
            "arg": "--knownAlleles", 
            "category": "Indel Realigner", 
            "default": null
          }, 
          "_order": 110, 
          "description": "Input VCF file(s) with known indels", 
          "id": "known_alleles", 
          "list": true, 
          "name": "Known Alleles", 
          "required": false, 
          "types": [
            "vcf"
          ]
        }
      ], 
      "outputs": [
        {
          "_extra": {
            "arg": "--out", 
            "category": "Indel Realigner", 
            "default": null
          }, 
          "_order": 111, 
          "description": "Output bam", 
          "id": "out", 
          "list": true, 
          "name": "Out", 
          "required": false, 
          "types": [
            "bam"
          ]
        }
      ], 
      "params": [
        {
          "_extra": {
            "arg": "--disableRandomization"
          }, 
          "_order": 5, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.", 
          "id": "disable_radnomization", 
          "list": false, 
          "name": "Disable Randomization", 
          "required": true, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-allowPotentiallyMisencodedQuals"
          }, 
          "_order": 6, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.", 
          "id": "allow_potentailly_misencoded_quals", 
          "list": false, 
          "name": "Allow Potentially Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--baq"
          }, 
          "_order": 7, 
          "category": "GATK General", 
          "condition": null, 
          "default": "OFF", 
          "description": "Type of BAQ calculation to apply in the engine.", 
          "id": "baq", 
          "list": false, 
          "name": "BAQ Calculation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "OFF", 
              "Off", 
              "OFF"
            ], 
            [
              "CALCULATE_AS_NECESSARY", 
              "Calculate as necessary", 
              "CALCULATE_AS_NECESSARY"
            ], 
            [
              "RECALCULATE", 
              "Recalculate", 
              "RECALCULATE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--baqGapOpenPenalty"
          }, 
          "_order": 8, 
          "category": "GATK General", 
          "condition": null, 
          "default": 40.0, 
          "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets", 
          "id": "baq_gap_open_penalty", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "BAQ Gap Open Penalty", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--defaultBaseQualities"
          }, 
          "_order": 9, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores", 
          "id": "default_base_qualities", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Default Base Qualities", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--disable_indel_quals"
          }, 
          "_order": 10, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.", 
          "id": "disable_indel_quals", 
          "list": false, 
          "name": "Disable Indel Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_coverage"
          }, 
          "_order": 11, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.", 
          "id": "downsample_to_coverage", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Coverage", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--downsample_to_fraction"
          }, 
          "_order": 12, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Fraction [0.0-1.0] of reads to downsample to", 
          "id": "downsample_to_fraction", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Downsample to Fraction", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--downsampling_type"
          }, 
          "_order": 13, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here", 
          "id": "downsampling_type", 
          "list": false, 
          "name": "Downsampling Type", 
          "required": null, 
          "type": "enum", 
          "values": [
            [
              "NONE", 
              "None", 
              "NONE"
            ], 
            [
              "ALL_READS", 
              "All Reads", 
              "ALL_READS"
            ], 
            [
              "BY_SAMPLE", 
              "By Sample", 
              "BY_SAMPLE"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--emit_original_quals"
          }, 
          "_order": 14, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR)", 
          "id": "emit_original_quals", 
          "list": false, 
          "name": "Emit Original Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "-fixMisencodedQuals"
          }, 
          "_order": 15, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Fix mis-encoded base quality scores", 
          "id": "fix_misencoded_quals", 
          "list": false, 
          "name": "Fix Misencoded Quals", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--interval_merging"
          }, 
          "_order": 16, 
          "category": "GATK General", 
          "condition": null, 
          "default": "ALL", 
          "description": "Indicates the interval merging rule we should use for abutting intervals", 
          "id": "interval_merging", 
          "list": false, 
          "name": "Interval Merging", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALL", 
              "ALL", 
              "ALL"
            ], 
            [
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY", 
              "OVERLAPPING_ONLY"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--interval_padding"
          }, 
          "_order": 17, 
          "category": "GATK General", 
          "condition": null, 
          "default": 0, 
          "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument", 
          "id": "interval_padding", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Interval Padding", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--interval_set_rule"
          }, 
          "_order": 18, 
          "category": "GATK General", 
          "condition": null, 
          "default": "UNION", 
          "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs", 
          "id": "interval_set_rule", 
          "list": false, 
          "name": "Interval Set Rule", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "UNION", 
              "UNION", 
              "UNION"
            ], 
            [
              "INTERSECTION", 
              "INTERSECTION", 
              "INTERSECTION"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--keep_program_records"
          }, 
          "_order": 19, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and keep program records from the SAM header", 
          "id": "keep_program_records", 
          "list": false, 
          "name": "Keep Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntime"
          }, 
          "_order": 20, 
          "category": "GATK General", 
          "condition": null, 
          "default": -1, 
          "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits", 
          "id": "max_runtime", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Runtime", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxRuntimeUnits"
          }, 
          "_order": 21, 
          "category": "GATK General", 
          "condition": null, 
          "default": "MINUTES", 
          "description": "The TimeUnit for maxRuntime", 
          "id": "max_runtime_units", 
          "list": false, 
          "name": "Max Runtime Units", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NANOSECONDS", 
              "NANOSECONDS", 
              "NANOSECONDS"
            ], 
            [
              "MICROSECONDS", 
              "MICROSECONDS", 
              "MICROSECONDS"
            ], 
            [
              "MILLISECONDS", 
              "MILLISECONDS", 
              "MILLISECONDS"
            ], 
            [
              "SECONDS", 
              "SECONDS", 
              "SECONDS"
            ], 
            [
              "MINUTES", 
              "MINUTES", 
              "MINUTES"
            ], 
            [
              "HOURS", 
              "HOURS", 
              "HOURS"
            ], 
            [
              "DAYS", 
              "DAYS", 
              "DAYS"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--nonDeterministicRandomSeed"
          }, 
          "_order": 22, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", 
          "id": "non_deterministic_random_seed", 
          "list": false, 
          "name": "Non Deterministic Random Seed", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeString"
          }, 
          "_order": 23, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Pedigree string for samples", 
          "id": "pedigree_string", 
          "list": true, 
          "name": "Pedigree String", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--pedigreeValidationType"
          }, 
          "_order": 24, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STRICT", 
          "description": "How strict should we be in validating the pedigree information?", 
          "id": "pedigree_validation_type", 
          "list": false, 
          "name": "Pedigree Validation Type", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ], 
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--phone_home"
          }, 
          "_order": 25, 
          "category": "GATK General", 
          "condition": null, 
          "default": "STANDARD", 
          "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.", 
          "id": "phone_home", 
          "list": false, 
          "name": "Phone Home", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "NO_ET", 
              "Disable phone home", 
              "NO_ET"
            ], 
            [
              "STANDARD", 
              "Write to S3", 
              "STANDARD"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--preserve_qscores_less_than"
          }, 
          "_order": 26, 
          "category": "GATK General", 
          "condition": null, 
          "default": 6, 
          "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR)", 
          "id": "preserve_qscores_less_than", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Preserve Qscores Less Than", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--read_filter"
          }, 
          "_order": 27, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Specify filtration criteria to apply to each read individually", 
          "id": "read_filter", 
          "list": true, 
          "name": "Read Filter", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--read_group_black_list"
          }, 
          "_order": 28, 
          "category": "GATK General", 
          "condition": null, 
          "default": [], 
          "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.", 
          "id": "read_group_black_list", 
          "list": true, 
          "name": "Read Group Black List", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--remove_program_records"
          }, 
          "_order": 29, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Should we override the Walker's default and remove program records from the SAM header", 
          "id": "remove_program_records", 
          "list": false, 
          "name": "Remove Program Records", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--tag"
          }, 
          "_order": 30, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis", 
          "id": "tag", 
          "list": false, 
          "name": "Tag", 
          "pattern": null, 
          "required": false, 
          "type": "string"
        }, 
        {
          "_extra": {
            "arg": "--unsafe"
          }, 
          "_order": 31, 
          "category": "GATK General", 
          "condition": null, 
          "default": null, 
          "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.", 
          "id": "unsafe", 
          "list": false, 
          "name": "Unsafe", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM", 
              "ALLOW_UNINDEXED_BAM"
            ], 
            [
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER", 
              "ALLOW_UNSET_BAM_SORT_ORDER"
            ], 
            [
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION", 
              "NO_READ_ORDER_VERIFICATION"
            ], 
            [
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY", 
              "ALLOW_SEQ_DICT_INCOMPATIBILITY"
            ], 
            [
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING", 
              "LENIENT_VCF_PROCESSING"
            ], 
            [
              "ALL", 
              "ALL", 
              "ALL"
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--use_legacy_downsampler"
          }, 
          "_order": 32, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation", 
          "id": "use_legacy_downsampler", 
          "list": false, 
          "name": "Use Legacy Downsampler", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--useOriginalQualities"
          }, 
          "_order": 33, 
          "category": "GATK General", 
          "condition": null, 
          "default": false, 
          "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores", 
          "id": "use_original_qualities", 
          "list": false, 
          "name": "Use Original Qualities", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {
            "arg": "--validation_strictness"
          }, 
          "_order": 34, 
          "category": "GATK General", 
          "condition": null, 
          "default": "SILENT", 
          "description": "How strict should we be with validation", 
          "id": "validation_strictness", 
          "list": false, 
          "name": "Validation Strictness", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "SILENT", 
              "SILENT", 
              "SILENT"
            ], 
            [
              "LENIENT", 
              "LENIENT", 
              "LENIENT"
            ], 
            [
              "STRICT", 
              "STRICT", 
              "STRICT"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 35, 
          "category": "GATK Grouping", 
          "condition": null, 
          "default": "sample", 
          "description": "Inputs will be grouped by selected value from this category. One output will be generated for each group.", 
          "id": "group_by", 
          "list": false, 
          "name": "Group by", 
          "required": true, 
          "type": "enum", 
          "values": [
            [
              "sample_group", 
              "Sample Group (Population)", 
              "Sample group"
            ], 
            [
              "sample", 
              "Sample", 
              "Sample"
            ], 
            [
              "library", 
              "Library", 
              "Library"
            ], 
            [
              "platform_unit", 
              "Platform Unit", 
              "Platform unit"
            ], 
            [
              "chunk", 
              "Chunk", 
              "Chunk"
            ], 
            [
              "interval", 
              "Interval", 
              "Interval"
            ]
          ]
        }, 
        {
          "_extra": {}, 
          "_order": 36, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. Set to 0 for the default value", 
          "id": "memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {}, 
          "_order": 37, 
          "category": "Advanced", 
          "condition": null, 
          "default": 0, 
          "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases)", 
          "id": "threads_per_job", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Threads per job", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--consensusDeterminationModel"
          }, 
          "_order": 112, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": "USE_READS", 
          "description": "Determines how to compute the possible alternate consenses", 
          "id": "consensus_determination_model", 
          "list": false, 
          "name": "Consensus Determination Model", 
          "required": false, 
          "type": "enum", 
          "values": [
            [
              "KNOWNS_ONLY", 
              "KNOWNS_ONLY", 
              "Uses only indels from a provided ROD of known indels."
            ], 
            [
              "USE_READS", 
              "USE_READS", 
              "Additionally uses indels already present in the original alignments of the reads."
            ], 
            [
              "USE_SW", 
              "USE_SW", 
              "Additionally uses 'Smith-Waterman' to generate alternate consensus."
            ]
          ]
        }, 
        {
          "_extra": {
            "arg": "--LODThresholdForCleaning"
          }, 
          "_order": 113, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 5.0, 
          "description": "LOD threshold above which the cleaner will clean", 
          "id": "lod_threshold_for_cleaning", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Lod Threshold For Cleaning", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--entropyThreshold"
          }, 
          "_order": 114, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 0.15, 
          "description": "percentage of mismatches at a locus to be considered having high entropy", 
          "id": "entropy_threshold", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Entropy Threshold", 
          "required": false, 
          "step": null, 
          "type": "float"
        }, 
        {
          "_extra": {
            "arg": "--maxConsensuses"
          }, 
          "_order": 115, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 30, 
          "description": "max alternate consensuses to try (necessary to improve performance in deep coverage)", 
          "id": "max_consensuses", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Consensuses", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxIsizeForMovement"
          }, 
          "_order": 116, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 3000, 
          "description": "maximum insert size of read pairs that we attempt to realign", 
          "id": "max_isize_for_movement", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Isize For Movement", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxPositionalMoveAllowed"
          }, 
          "_order": 117, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 200, 
          "description": "maximum positional move in basepairs that a read can be adjusted during realignment", 
          "id": "max_positional_move_allowed", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Positional Move Allowed", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxReadsForConsensuses"
          }, 
          "_order": 118, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 120, 
          "description": "max reads used for finding the alternate consensuses (necessary to improve performance in deep coverage)", 
          "id": "max_reads_for_consensuses", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Reads For Consensuses", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxReadsForRealignment"
          }, 
          "_order": 119, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 20000, 
          "description": "max reads allowed at an interval for realignment", 
          "id": "max_reads_for_realignment", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Reads For Realignment", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--maxReadsInMemory"
          }, 
          "_order": 120, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 150000, 
          "description": "max reads allowed to be kept in memory at a time by the SAMFileWriter", 
          "id": "max_reads_in_memory", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Max Reads In Memory", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }, 
        {
          "_extra": {
            "arg": "--noOriginalAlignmentTags"
          }, 
          "_order": 121, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": false, 
          "description": "Don't output the original cigar or alignment start tags for each realigned read in the output bam", 
          "id": "no_original_alignment_tags", 
          "list": false, 
          "name": "No Original Alignment Tags", 
          "required": false, 
          "type": "boolean"
        }, 
        {
          "_extra": {}, 
          "_order": 122, 
          "category": "Indel Realigner", 
          "condition": null, 
          "default": 2048, 
          "description": "Memory Requirement", 
          "id": "memory_requirement", 
          "list": false, 
          "max": null, 
          "min": null, 
          "name": "Memory Requirement", 
          "required": false, 
          "step": null, 
          "type": "integer"
        }
      ]
    }, 
    "wrapper_id": "sbg_gatk.indel_realigner.wrapper.IndelRealignerLite"
  }
]
